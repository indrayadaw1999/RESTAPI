package com.indra.abes.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
import com.indra.abes.entities.Book;
import com.indra.abes.service.BookService;

@RestController
public class BookController {
	
	@Autowired
	private BookService bookService;
	
	//@RequestMapping(value = "/books",method = RequestMethod.GET)
//	@GetMapping("/books")//get all book handler
//	public List<Book> getBooks() {
//		
//		return this.bookService.getAllBooks();
//	}
	
	//HTTP Status Code
	@GetMapping("/books")
	public ResponseEntity<List<Book>> getBooks(){
		List<Book> list = bookService.getAllBooks();
		if(list.size()<=0) {
			return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
		}
		return ResponseEntity.of(Optional.of(list));
	}
	
	
	//get single book handler
//	@GetMapping("books/{id}")
//	public Book getBook(@PathVariable("id")int id) {
//		
//		return bookService.getBookById(id);
//	}
	
	//HTTP Status of single book
	@GetMapping("/books/{id}")
	public ResponseEntity<Book> getBook(@PathVariable("id")int id){
		
		Book book = bookService.getBookById(id);
		if(book==null)
		{
			return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
		}
		return ResponseEntity.of(Optional.of(book));
	}
	
	
	
	//add book hnadlet
	//create operation perfotm
		//adding the book
	
//		@PostMapping("/books")
//		public Book addBook(@RequestBody Book book) {
//			Book b = this.bookService.addBook(book);
//		
//		System.out.println(book);
//			return b;
//		}
	
	//Update the status of post mapping request
	
//	@PostMapping("/books")
	public ResponseEntity<Book> addBook(@RequestBody Book book) {
		Book b = null;
		try {
			   b = this.bookService.addBook(book);
			
			   System.out.println(book);
			   return ResponseEntity.of(Optional.of(b));
		   }
		catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
		}
		
//		return b;
	}
		
		//Delete book handler 
		
		@DeleteMapping("/books/{bookId}")
		public void deleteBook(@PathVariable("bookId")int bookId) {
			this.bookService.deleteBook(bookId);
		}
		
		//UPDATE the data Update operation by using the @PutMapping
		@PutMapping("/books/{bookId}")
		public Book updateBook(@RequestBody Book book , @PathVariable("bookId")int bookId) {
			
			this.bookService.updateBook(book ,bookId);
			
			return book;
			
		}

}
